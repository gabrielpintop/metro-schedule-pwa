!function (e) { var n = Object.create(null), r = "store"; function o(e) { if (e !== n) throw TypeError("Invalid constructor") } function t(e, r, o) { if (e !== n) throw TypeError("Invalid constructor"); this._name = r, this._db = o } o.prototype = { open: function (e) { return new Promise(function (o, i) { var c = indexedDB.open("$SimpleDB$" + e); c.onupgradeneeded = function () { c.result.createObjectStore(r) }, c.onsuccess = function () { var r = c.result; o(new t(n, e, r)) }, c.onerror = function () { i(c.error) } }) }, delete: function (e) { return new Promise(function (n, r) { var o = indexedDB.deleteDatabase("$SimpleDB$" + e); o.onsuccess = function () { n(void 0) }, o.onerror = function () { r(o.error) } }) } }, t.prototype = { get name() { return this._name }, get: function (e) { var n = this; return new Promise(function (o, t) { var i = n._db.transaction(r, "readwrite"), c = i.objectStore(r).get(e); i.oncomplete = function () { o(c.result) }, i.onabort = function () { t(i.error) } }) }, set: function (e, n) { var o = this; return new Promise(function (t, i) { var c = o._db.transaction(r, "readwrite"); c.objectStore(r).put(n, e); c.oncomplete = function () { t(void 0) }, c.onabort = function () { i(c.error) } }) }, delete: function (e) { var n = this; return new Promise(function (o, t) { var i = n._db.transaction(r, "readwrite"); i.objectStore(r).delete(e); i.oncomplete = function () { o(void 0) }, i.onabort = function () { t(i.error) } }) }, clear: function () { var e = this; return new Promise(function (n, o) { var t = e._db.transaction(r, "readwrite"); t.objectStore(r).clear(); t.oncomplete = function () { n(void 0) }, t.onabort = function () { o(t.error) } }) }, forEach: function (e, n) { var o = this; return new Promise(function (t, i) { n = n || {}; var c = o._db.transaction(r, "readwrite"), a = c.objectStore(r).openCursor(n.range, "reverse" === n.direction ? "prev" : "next"); a.onsuccess = function () { var n = a.result; if (n) try { e(n.key, n.value) || n.continue() } catch (e) { c.abort() } }, c.oncomplete = function () { t(void 0) }, c.onabort = function () { i(c.error) } }) }, getMany: function (e) { var n = this; return new Promise(function (o, t) { var i = n._db.transaction(r, "readwrite"), c = i.objectStore(r), a = []; for (var u of e) c.get(u).onsuccess(function (e) { a.push(e) }); i.oncomplete = function () { o(a) }, i.onabort = function () { t(i.error) } }) }, setMany: function (e) { var n = this; return new Promise(function (o, t) { var i = n._db.transaction(r, "readwrite"), c = i.objectStore(r); for (var a of e) c.put(a.value, a.key); i.oncomplete = function () { o(void 0) }, i.onabort = function () { t(i.error) } }) }, deleteMany: function (e) { var n = this; return new Promise(function (o, t) { var i = n._db.transaction(r, "readwrite"), c = i.objectStore(r); for (var a of e) c.delete(a); i.oncomplete = function () { o(void 0) }, i.onabort = function () { t(i.error) } }) } }, e.indexedDB && e.indexedDB.open && (t.cmp = indexedDB.cmp, e.simpleDB = new o(n), e.SimpleDBKeyRange = IDBKeyRange) }(self);